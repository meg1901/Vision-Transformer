# -*- coding: utf-8 -*-
"""Vision Transformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNB9fNmh_N8GITcS0fJCLdGW3M4vpxem

Import Dataset and Hyperparameter Definition
"""

import numpy as np

#tensorflow packages
import tensorflow as tf
!pip install tensorflow-hub
!pip install tensorflow-datasets
import tensorflow_hub as hub
import tensorflow_datasets as tfds
from tensorflow import keras
from tensorflow.keras import layers

num_classes = 10
input_shapre=(32,32,3)
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

print(f"x_train shape: {x_train.shape}-y_train shape: {y_train.shape}")

print(f"x_test shape: {x_test.shape}-y_test shape: {y_test.shape}")

learning_rate = 0.001
weigth_decay = 0.0001
batch_size= 256
num_epochs =40
image_size = 72 #we'll resize input image to this size
patch_size= 6 #size of patches to be extract from the input images
num_patches = (image_size//patch_size)
projection_dim = 64
num_heads = 4
transformer_units = [
    projection_dim*2,
    projection_dim
]#size of transformer layers
transformer_layers = 8
mlp_head_units = [2048,1024] #size of dense layers of the final classifier

"""Data Augmentation and MLP Funciton

"""

data_augmentation = keras.Sequential(
  [
    layers.Normalization(),
    layers.Resizing(image_size, image_size),
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(factor=0.02),
    layers.RandomZoom(
        height_factor = 0.2, width_factor=0.2)
  ],
  name="data_augmentation"
)
data_augmentation.layers[0].adapt(x_train)

def mlp(x, hidden_units, dropout_rate):
  for units in hidden_units:
    x =layers.Dense(units, activation = tf.nn.gelu)(x)
    x= layers.Dropout(dropout_rate)(x)
    return x

"""Patches"""

#layer is parent class for patch class and patch class inherits the properties of layer class
class Patches(layers.Layer):
    def __init__(self, patch_size):
        super(Patches, self).__init__()
        self.patch_size = patch_size

    def call(self, images):
      batch_size = tf.shape(images)[0]
      patches = tf.image.extract_patches(
         images=images,
         sizes=[1, self.patch_size, self.patch_size, 1],
         strides=[1, self.patch_size, self.patch_size, 1],
         rates=[1, 1, 1, 1],
         padding='VALID'
)
      patch_dims = patches.shape[-1]
      patches = tf.reshape(patches,[batch_size,-1,patch_dims])
      return patches

import matplotlib.pyplot as plt

plt.figure(figsize=(4,4))
image = x_train[np.random.choice(range(x_train.shape[0]))]
plt.imshow(image.astype("uint8"))
plt.axis("off")

resized_image = tf.image.resize(
    tf.convert_to_tensor([image]), size=(image_size, image_size)
)

patches = Patches(patch_size)(resized_image)
print(f"Image size: {image_size} X {image_size}")
print(f"Patch size: {patch_size} X {patch_size}")
print(f"Elements per patch: {patches.shape[-1]}")
print(f"Elements per patch: {patches.shape[-1]}")

n = int(np.sqrt(patches.shape[1]))
plt.figure(figsize=(4,4))
for i, patch in enumerate(patches[0]):
  ax = plt.subplot(n, n, i+1)
  patch_img = tf.reshape(patch, (patch_size, patch_size, 3))
  plt.imshow(patch_img.numpy().astype("uint8"))
  plt.axis("off")

"""ViT Classification Creation"""

class PatchEncoder(layers.Layer):
  def __init__(self, num_patches, projection_dim):
      super (PatchEncoder, self). __init__()
      self.num_patches= num_patches
      self.projection = layers.Dense (units-projection_dim)
      self.position_embedding= layers. Embedding(
          input_dim = num_patches, output_dim = projection_dim
      )

def call(self, patch):
    positions = tf.range(start=0, limit=self.num_patches, delta=1)
    encoded = self.projection(patch) + self.position_embedding(positions)
    return encoded

def create_vit_classifier():
    input_shape = (32, 32, 3)
    num_patches = (32 // patch_size) ** 2  # Assuming patch_size is defined
    projection_dim = 64  # Example value, adjust as needed
    num_heads = 4  # Example value, adjust as needed
    transformer_layers = 8  # Example value, adjust as needed
    mlp_head_units = [2048, 1024]  # Example values, adjust as needed

    inputs = layers.Input(shape=input_shape)

    # Create patches and encode them
    patches = Patches(patch_size)(inputs)
    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)

    # Create multiple Transformer blocks
    for _ in range(transformer_layers):
        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)
        attention_output = layers.MultiHeadAttention(num_heads=num_heads, key_dim=projection_dim)(x1, x1)
        x2 = layers.Add()([attention_output, encoded_patches])

        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)
        x3 = mlp(x3, hidden_units=mlp_head_units, dropout_rate=0.1)
        encoded_patches = layers.Add()([x3, x2])

    # Apply global average pooling to get a single output
    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)
    representation = layers.GlobalAveragePooling1D()(representation)

    # Add a dense layer with softmax activation for classification
    outputs = layers.Dense(num_classes, activation='softmax')(representation)

    # Create the Keras model
    model = tf.keras.Model(inputs=inputs, outputs=outputs)

    return model



"""Training and Evaluation"""

!pip install tensorflow-addons

import tensorflow as tf
import tensorflow_addons as tfa

def run_experiment(model, x_train, y_train, x_test, y_test, learning_rate, weight_decay, batch_size, num_epochs):
    optimizer = tfa.optimizers.AdamW(
        learning_rate=learning_rate,
        weight_decay=weight_decay
    )

    model.compile(
        optimizer=optimizer,
        loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
        metrics=[
            tf.keras.metrics.SparseCategoricalAccuracy(name="accuracy"),
            tf.keras.metrics.SparseTopKCategoricalAccuracy(5, name="top-5-accuracy"),
        ]
    )

    checkpoint_filepath = "./tmp/checkpoint"
    checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
        checkpoint_filepath,
        monitor="val_accuracy",
        save_best_only=True,
        save_weights_only=True,
    )

    history = model.fit(
        x=x_train,
        y=y_train,
        batch_size=batch_size,
        epochs=num_epochs,
        validation_split=0.1,
        callbacks=[checkpoint_callback],
    )

    model.load_weights(checkpoint_filepath)
    # Go ahead and evaluate our model
    _, accuracy, top_5_accuracy = model.evaluate(x_test, y_test)
    print(f"Test accuracy: {round(accuracy * 100, 2)}%")
    print(f"Test Top 5 accuracy: {round(top_5_accuracy * 100, 2)}%")

# Example usage:
# Assuming you have defined your model, x_train, y_train, x_test, y_test, learning_rate, weight_decay, batch_size, and num_epochs.
# run_experiment(model, x_train, y_train, x_test, y_test, learning_rate, weight_decay, batch_size, num_epochs)

vit_classifier= create_vit_classifier()
history = run_experiment(vit_classifier)

vit_classifier = create_vit_classifier()

# Assuming run_experiment is defined previously with the correct parameters
run_experiment(vit_classifier, x_train, y_train, x_test, y_test, learning_rate, weight_decay, batch_size, num_epochs)

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.datasets import cifar10

# Load CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Define hyperparameters
input_shape = (32, 32, 3)
patch_size = 6
num_patches = (input_shape[0] // patch_size) * (input_shape[1] // patch_size)
projection_dim = 64
num_heads = 4
transformer_units = [projection_dim * 2, projection_dim]
mlp_head_units = [2048, 1024]
num_classes = 10
learning_rate = 1e-4
weight_decay = 1e-4
batch_size = 64
num_epochs = 20

# Data augmentation layer
data_augmentation = tf.keras.Sequential([
    layers.Normalization(),
    layers.Resizing(72, 72),
    layers.RandomFlip("horizontal"),
    layers.RandomRotation(factor=0.02),
    layers.RandomZoom(height_factor=0.2, width_factor=0.2),
])

data_augmentation.layers[0].adapt(x_train)

class Patches(layers.Layer):
    def __init__(self, patch_size):
        super(Patches, self).__init__()
        self.patch_size = patch_size

    def call(self, images):
        batch_size = tf.shape(images)[0]
        patches = tf.image.extract_patches(
            images=images,
            sizes=[1, self.patch_size, self.patch_size, 1],
            strides=[1, self.patch_size, self.patch_size, 1],
            rates=[1, 1, 1, 1],
            padding='VALID',
        )
        patch_dims = patches.shape[-1]
        patches = tf.reshape(patches, [batch_size, -1, patch_dims])
        return patches

class PatchEncoder(layers.Layer):
    def __init__(self, num_patches, projection_dim):
        super(PatchEncoder, self).__init__()
        self.num_patches = num_patches
        self.projection = layers.Dense(units=projection_dim)
        self.position_embedding = layers.Embedding(
            input_dim=num_patches, output_dim=projection_dim
        )

    def call(self, patches):
        positions = tf.range(start=0, limit=self.num_patches, delta=1)
        encoded = self.projection(patches) + self.position_embedding(positions)
        return encoded

def mlp(x, hidden_units, dropout_rate):
    for units in hidden_units:
        x = layers.Dense(units, activation=tf.nn.gelu)(x)
        x = layers.Dropout(dropout_rate)(x)
    return x

def create_vit_classifier():
    inputs = layers.Input(shape=input_shape)
    # Augment data
    augmented = data_augmentation(inputs)
    # Create patches
    patches = Patches(patch_size)(augmented)
    # Encode patches
    encoded_patches = PatchEncoder(num_patches, projection_dim)(patches)

    for _ in range(8):  # Number of transformer layers
        # Layer normalization 1
        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)
        # Multi-head attention layer
        attention_output = layers.MultiHeadAttention(
            num_heads=num_heads, key_dim=projection_dim, dropout=0.1
        )(x1, x1)
        # Skip connection 1
        x2 = layers.Add()([attention_output, encoded_patches])
        # Layer normalization 2
        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)
        # MLP
        x3 = mlp(x3, hidden_units=transformer_units, dropout_rate=0.1)
        # Skip connection 2
        encoded_patches = layers.Add()([x3, x2])

    # Create a [batch_size, projection_dim] tensor
    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)
    representation = layers.Flatten()(representation)
    representation = layers.Dropout(0.5)(representation)
    # Add MLP
    features = mlp(representation, hidden_units=mlp_head_units, dropout_rate=0.5)
    # Classify outputs
    logits = layers.Dense(num_classes)(features)
    # Create the Keras Model
    model = tf.keras.Model(inputs=inputs, outputs=logits)
    return model

vit_classifier = create_vit_classifier()

# Assuming run_experiment is defined previously with the correct parameters
run_experiment(vit_classifier, x_train, y_train, x_test, y_test, learning_rate, weight_decay, batch_size, num_epochs)

